// schema.prisma
generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma/"
  previewFeatures = ["fullTextSearch", "filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DEVELOPER
  TEAM_LEAD
  MANAGER
}

enum ProjectType {
  FRONTEND
  BACKEND
  DATABASE
  FULLSTACK
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskType {
  FEATURE
  BUG
  REFACTOR
  RESEARCH
  MAINTENANCE
}

enum ModuleType {
  AUTHENTICATION
  PAYMENT
  NOTIFICATION
  REPORTING
  INTEGRATION
  UI_COMPONENTS
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  fullName  String   @map("full_name")
  phone     String?
  password  String
  role      UserRole @default(DEVELOPER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  tasks     Task[]
  modules   Module[] @relation("ModuleAssignments")

  @@map("users")
}

model Project {
  id          Int         @id @default(autoincrement())
  name        String      @unique @map("project_name")
  description String
  type        ProjectType @default(FRONTEND)
  priority    Priority    @default(LOW)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  modules     Module[]
  tasks       Task[]

  @@map("projects")
}

model Module {
  id             Int        @id @default(autoincrement())
  name           String
  description    String?
  type           ModuleType
  priority       Priority   @default(MEDIUM)
  buildTime      Int?       @map("build_time") // in hours
  bufferTime     Int?       @map("buffer_time") // in hours
  startDate      DateTime?  @map("start_date")
  endDate        DateTime?  @map("end_date")
  estimatedHours Float?     @map("estimated_hours")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  projectId Int     @map("project_id")
  project   Project @relation(fields: [projectId], references: [id])

  assignedDevelopers User[] @relation("ModuleAssignments")
  tasks              Task[]

  @@index([projectId])
  @@map("modules")
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  type           TaskType  @default(FEATURE)
  priority       Priority  @default(MEDIUM)
  dueDate        DateTime? @map("due_date")
  estimatedHours Float?    @map("estimated_hours")
  completed      Boolean   @default(false)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  projectId Int     @map("project_id")
  project   Project @relation(fields: [projectId], references: [id])

  moduleId Int?    @map("module_id")
  module   Module? @relation(fields: [moduleId], references: [id])

  assignedUserId Int  @map("assigned_user_id")
  assignedUser   User @relation(fields: [assignedUserId], references: [id])

  @@index([projectId])
  @@index([moduleId])
  @@index([assignedUserId])
  @@index([dueDate])
  @@index([priority])
  @@map("tasks")
}
