// schema.prisma
generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma/"
  previewFeatures = ["fullTextSearch", "filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DEVELOPER
  TEAM_LEAD
  MANAGER
}

enum ProjectType {
  FRONTEND
  BACKEND
  DATABASE
  FULLSTACK
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskType {
  FEATURE
  BUG
  REFACTOR
  RESEARCH
  MAINTENANCE
}

enum ModuleType {
  FRONTEND
  BACKEND
  DATABASE
  FULLSTACK
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model User {
  id              Int           @id @default(autoincrement())
  username        String        @unique
  email           String        @unique
  fullName        String        @map("full_name")
  phone           String?
  password        String
  role            UserRole      @default(DEVELOPER)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  // relations
  projects        Project[]     @relation("ProjectMembers")
  assignedModules Module[]      @relation("ModuleAssignments")
  assignedTasks Task[] @relation("TaskAssignments")
  workSessions    WorkSession[]
  managedProjects Project[]     @relation("ProjectManager")
  projectId       Int?

  @@map("users")
}

model Project {
  id          Int         @id @default(autoincrement())
  name        String      @unique @map("project_name")
  description String
  type        ProjectType @default(FRONTEND)
  priority    Priority    @default(LOW)
  progress    Float       @default(0)
  dueDate     DateTime    @map("due_date")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  completed   Boolean     @default(false)
  active      Boolean     @default(true)
  // relations
  members     User[]      @relation("ProjectMembers")
  modules     Module[]
  tasks       Task[]
  manager     User?       @relation("ProjectManager", fields: [userId], references: [id])
  userId      Int?

  @@index([dueDate])
  @@map("projects")
}

model Module {
  id             Int        @id @default(autoincrement())
  name           String
  description    String?
  type           ModuleType
  priority       Priority   @default(MEDIUM)
  buildTime      Int?       @map("build_time") // in hours
  bufferTime     Int?       @map("buffer_time") // in hours
  startDate      DateTime?  @map("start_date")
  endDate        DateTime?  @map("end_date")
  totalWorkHours Float?     @default(0) @map("total_work_hours")
  progress       Float?     @default(0) @map("progress")
  estimatedHours Float?     @map("estimated_hours")
  completed      Boolean    @default(false)
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  project            Project @relation(fields: [projectId], references: [id])
  projectId          Int     @map("project_id")
  assignedDevelopers User[]  @relation("ModuleAssignments")
  tasks              Task[]

  @@index([projectId])
  @@map("modules")
}

model Task {
  id             Int        @id @default(autoincrement())
  title          String
  description    String?
  type           TaskType   @default(FEATURE)
  priority       Priority   @default(MEDIUM)
  dueDate        DateTime?  @map("due_date")
  progress       Float?     @default(0) @map("progress")
  totalWorkHours Float?     @default(0) @map("total_work_hours")
  estimatedHours Float?     @map("estimated_hours")
  completed      Boolean    @default(false)
  startedAt      DateTime?  @map("started_at")
  status         TaskStatus @default(TODO)
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  // relations
  project        Project    @relation(fields: [projectId], references: [id])
  projectId      Int        @map("project_id")

  module   Module @relation(fields: [moduleId], references: [id])
  moduleId Int    @map("module_id")

  assignedUser   User?   @relation("TaskAssignments", fields: [assignedUserId], references: [id])
  assignedUserId Int?    @map("assigned_user_id")
  workSessions WorkSession[]

  @@index([projectId])
  @@index([moduleId])
  @@index([dueDate])
  @@index([priority])
  @@map("tasks")
}

model WorkSession {
  id              Int       @id @default(autoincrement())
  userId          Int       @map("user_id")
  projectId       Int       @map("project_id")
  moduleId        Int       @map("module_id")
  taskId          Int       @map("task_id")
  start           DateTime
  end             DateTime?
  durationMinutes Float     @map("duration_minutes")
  summary         String
  progress        Float?
  Task            Task      @relation(fields: [taskId], references: [id])
  User            User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([moduleId])
  @@index([taskId])
  @@index([start])
  @@index([end])
  @@map("work_sessions")
}
